# Count and print lines of code
#
# @param ... - path to search for code files
count_lines() {
	for P
	do
		if [ -d "$P" ]
		then
			find "$P" -type f | while read -r
			do
				[[ $REPLY == *.aside/* ]] && continue
				[[ $REPLY == *.git/* ]] && continue
				[[ $REPLY == *build/* ]] && continue
				[[ $REPLY == bin/* ]] && {
					# include scripts in dotfiles
					cat "$REPLY"
					continue
				}
				case "${REPLY##*.}" in
					java|kt|rs|c|cpp|cc|h|hh|js|html|php|py|glsl|fs|vs)
						cat "$REPLY";;
				esac
			done
		else
			# expand possible wildcards
			cat $P
		fi
	done | awk 'NF' | wc -l
}

# Group digits
#
# @param 1 - digits to group
group_digits() {
	local LEN=${#1}
	local GL=$((LEN % 3))
	((GL == 0)) && GL=3
	local I=0
	while true
	do
		printf "${1:I:GL}"
		((I += GL))
		((I >= LEN)) && break
		printf ','
		GL=3
	done
	echo
}

# Print lines of code for given repository
#
# @param 1 - path to repository
# @param ... - path to source files (optional)
loc() {
	local REPO=${1%%:*}
	local TAG=
	[[ $1 == *:* ]] && TAG=${1##*:}
	[ -d "$REPO" ] && (
		cd "$REPO" || exit

		BRANCH=
		[ -d .git ] && [ "$TAG" ] && {
			BRANCH=$(git rev-parse --abbrev-ref HEAD)
			git checkout "$TAG" &>/dev/null || exit
		}

		shift
		LOC=$(count_lines "${@:-.}")
		LOC=${LOC##* }

		[ "$BRANCH" ] && git checkout "$BRANCH" &>/dev/null

		echo "$(group_digits "$LOC") Lines"
	)
}
